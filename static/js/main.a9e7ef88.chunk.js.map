{"version":3,"sources":["components/Wrapper/index.js","components/Nav/index.js","components/Title/index.js","components/PlayingCards/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Nav","Title","PlayingCards","onClick","imageClick","name","alt","src","image","App","state","cards","score","highscore","message","clicked","randomImage","newImgArr","length","card","Math","floor","random","indexOf","push","_this","setState","console","log","_this2","this","components_Nav","components_Title","components_Wrapper","map","components_PlayingCards","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iqDAOeA,MAJf,SAAiBC,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,iBCkB5BC,MAnBf,SAAaN,GAET,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,eAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACTJ,EAAMK,oBCFZE,MARf,SAAeP,GACX,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAAkCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,4EAAqGH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWJ,EAAMK,0BCU9JG,MAbf,SAAsBR,GAClB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMU,WAAWV,EAAMW,OAAOA,KAAMX,EAAMW,KAAKC,IAAKZ,EAAMW,KAAME,IAAKb,EAAMc,WCgGhGC,6MA7FPC,MAAQ,CACJC,QACAC,MAAO,EACPC,UAAW,EACXC,QAAS,iBACTC,QAAS,MAGbC,YAAc,WAER,IADF,IAAMC,EAAY,GACVA,EAAUC,SAAWP,EAAMO,QAAO,CACtC,IAAIC,EAAOR,EAAMS,KAAKC,MAAMD,KAAKE,SAASX,EAAMO,SAC7CD,EAAUM,QAAQJ,GAAM,GACzBF,EAAUO,KAAKL,GAGrB,OAAOF,KAIfb,WAAa,SAAAC,GACT,GAAGoB,EAAKf,MAAMK,QAAQQ,QAAQlB,IAAO,EAmBnC,OAjBAoB,EAAKC,SAAS,CACZX,QAAS,GACTD,QAAS,8BAIRW,EAAKf,MAAME,MAAQa,EAAKf,MAAMG,WAC/BY,EAAKC,SAAS,CACZb,UAAWY,EAAKf,MAAME,aAI1Ba,EAAKC,SAAS,CACZd,MAAO,IAOT,IAAIA,EAAQa,EAAKf,MAAME,QACvBA,EAEWa,EAAKf,MAAMG,WACpBY,EAAKC,SAAS,CACZb,UAAWD,IAGfa,EAAKC,SAAS,CACZd,MAAOA,EACPE,QAAS,yBAIb,IAAIC,EAAUU,EAAKf,MAAMK,QACzBA,EAAQS,KAAKnB,GACboB,EAAKC,SAAS,CACZX,YAEFY,QAAQC,IAAIH,EAAKf,MAAMK,kFAQlB,IAAAc,EAAAC,KACL,OACInC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkC,EAAD,KAAKpC,EAAAC,EAAAC,cAAA,sBAAciC,KAAKpB,MAAME,MAAzB,kBAA+CkB,KAAKpB,MAAMG,YAC/DlB,EAAAC,EAAAC,cAACmC,EAAD,KAAQF,KAAKpB,MAAMI,SACnBnB,EAAAC,EAAAC,cAACoC,EAAD,KACKH,KAAKd,cAAckB,IAAI,SAAAf,GAAI,OACxBxB,EAAAC,EAAAC,cAACsC,EAAD,CACI/B,WAAYyB,EAAKzB,WACjBgC,GAAIjB,EAAKiB,GACTC,IAAKlB,EAAKiB,GACV/B,KAAMc,EAAKd,KACXG,MAAOW,EAAKX,mBArFtB8B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a9e7ef88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n\r\n    return (\r\n\r\n        <nav className=\"navbar navbar-dark bg-dark fixed-top\">\r\n            <span className=\"navbar-text\">\r\n                <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">Clicky Game</li>\r\n\r\n                <li className=\"scores nav-item\">\r\n                    {props.children}\r\n                </li>\r\n                </ul>\r\n            </span>\r\n\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return ( \r\n    <div>\r\n        <h1 className=\"title\"> Clicky Game<p className=\"sub-title\">Click on an image to earn points, but don't click on any more than once!</p><p className=\"message\">{props.children}</p></h1>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction PlayingCards(props) {\r\n    return (\r\n       \r\n        <div className=\"card\">\r\n            \r\n            <div className=\"img-container grow\">\r\n                <img onClick={() => props.imageClick(props.name)} name={props.name}alt={props.name} src={props.image} />\r\n            </div>\r\n            </div>\r\n        \r\n    );\r\n}\r\n \r\nexport default PlayingCards;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Title from \"./components/Title\";\nimport cards from \"./cards.json\";\nimport PlayingCards from \"./components/PlayingCards\";\nimport \"./index.css\";\n\n\nclass App extends Component {\n    \n        \n        state = {\n            cards,\n            score: 0,\n            highscore: 0,\n            message: \"Start the Game\",\n            clicked: []\n        };\n    \n        randomImage = () => {\n            const newImgArr = [];\n              while(newImgArr.length !== cards.length){\n                let card = cards[Math.floor(Math.random()*cards.length)];\n                if(newImgArr.indexOf(card)<0){\n                  newImgArr.push(card)\n                }\n              }\n            return newImgArr\n          }\n\n  \n    imageClick = name => {\n        if(this.state.clicked.indexOf(name)>-1){\n    \n          this.setState({ \n            clicked: [],\n            message: \"You lost! Game Restarted.\"\n            \n         })\n    \n          if(this.state.score > this.state.highscore){\n            this.setState({ \n              highscore: this.state.score \n            })\n          }\n    \n          this.setState({ \n            score: 0,\n            })\n         \n          \n          return;\n    \n        } else {\n          var score = this.state.score;\n          score++;\n    \n          if(score > this.state.highscore){\n            this.setState({ \n              highscore: score \n            })\n          }\n          this.setState({ \n            score: score, \n            message: \"Choose another image\"\n          })\n        }\n    \n        let clicked = this.state.clicked\n        clicked.push(name )    \n        this.setState({ \n          clicked \n        })\n        console.log(this.state.clicked)\n      }\n    // function to change the state of score\n    // if clicked once add to score then randomly move the cards,\n    // if clicked a second time, \"you lose\", save high score, restart game\n   \n\n\n    render() {\n        return (\n            <div>\n                <Nav><span>Score: {this.state.score}  / Highscore: {this.state.highscore}</span></Nav>\n                <Title>{this.state.message}</Title>\n                <Wrapper>\n                    {this.randomImage().map(card => (\n                        <PlayingCards\n                            imageClick={this.imageClick}\n                            id={card.id}\n                            key={card.id}\n                            name={card.name}\n                            image={card.image}\n\n                        />\n                    ))}\n                </Wrapper>\n            </div>\n        );\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}